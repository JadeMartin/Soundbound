package controllers;

import models.PartnerFormData;
import models.Profile;
import play.data.Form;
import play.data.FormFactory;
import play.i18n.MessagesApi;
import play.mvc.Controller;
import play.mvc.Http;
import play.mvc.Result;
import views.html.*;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Calendar;

/**
 * This class is the controller for the travellers.scala.html file, it provides the route to the
 * travellers page
 */
public class TravellersController extends Controller {


    private final Form<PartnerFormData> form;
    private MessagesApi messagesApi;

    @Inject
    public TravellersController(FormFactory formFactory, MessagesApi messagesApi) {
        this.form = formFactory.form(PartnerFormData.class);
        this.messagesApi = messagesApi;
    }

    /**
     * Function to search travellers n gender nationality, age and traveller type fields, calls search functions for
     * each field
     * @param request http request
     * @return renders traveller view with queried list of travellers
     */
    public Result search(Http.Request request){
        Form<PartnerFormData> searchForm = form.bindFromRequest(request);
        PartnerFormData searchData = searchForm.get();
        List<Profile> resultData = Profile.find.all();
        //todo change queryProfiles to be list of profiles generated by search functionality

        System.out.println("Age " + searchForm.get().searchAgeRange);
        if (searchForm.get().searchGender != ""){
            resultData = listGender(searchData);
        }
        if (searchForm.get().searchNationality != ""){
            resultData = searchNat(resultData, searchData);
        }

        if (searchForm.get().searchAgeRange != null){
            resultData = searchAge(resultData, searchData);
        }

        if (searchForm.get().searchTravellerTypes != ""){
            resultData = searchTravelTypes(resultData, searchData);
        }

        return ok(travellers.render(form, resultData, request, messagesApi.preferred(request)));
    }

    /**
     * Removes Nationalities from result list
     * @param resultData current list to return
     * @param searchData Form holding search terms
     * @return queried list including nationality search
     */
    public List<Profile> searchNat(List<Profile> resultData, PartnerFormData searchData){
        List<Profile> resultProfiles = new ArrayList<>();
        for (Profile profile: resultData){
            if (profile.getNationalities().contains(searchData.searchNationality)){
                resultProfiles.add(profile);
            }
        }
        return resultProfiles;
    }

    /**
     * Removes ages from result list
     * @param resultData current list to return
     * @param searchData Form holding search terms
     * @return queried list including age search
     */
    public List<Profile> searchAge(List<Profile> resultData, PartnerFormData searchData) {
        List<Profile> resultProfiles = new ArrayList<>();

        System.out.println("Partner (Age) " + searchData.searchAgeRange);
        int travellerTypeTerm = searchData.searchAgeRange;

        System.out.println("Age range type " + travellerTypeTerm);
        Date range1;
        Date range2;

        for (Profile profile : resultData) {

            switch (travellerTypeTerm) {
                case 1: // < 18
                    Calendar calendar11 = Calendar.getInstance();
                    calendar11.add(Calendar.YEAR, -18);
                    range1 = calendar11.getTime();
                    if (profile.getBirthDate().getTime() > range1.getTime()) {
                        resultProfiles.add(profile);
                    }
                    break;
                case 2: // 18-25
                    Calendar calendar21 = Calendar.getInstance();
                    Calendar calendar22 = Calendar.getInstance();
                    calendar21.add(Calendar.YEAR, -18);
                    calendar22.add(Calendar.YEAR, -25);
                    range1 = calendar21.getTime();
                    range2 = calendar22.getTime();
                    if ((profile.getBirthDate().getTime() > range2.getTime()) && (profile.getBirthDate().getTime() < range1.getTime())) {
                        resultProfiles.add(profile);
                    }
                    break;
                case 3: // 25-35
                    Calendar calendar31 = Calendar.getInstance();
                    Calendar calendar32 = Calendar.getInstance();
                    calendar31.add(Calendar.YEAR, -25);
                    calendar32.add(Calendar.YEAR, -35);
                    range1 = calendar31.getTime();
                    range2 = calendar32.getTime();
                    if ((profile.getBirthDate().getTime() > range2.getTime()) && (profile.getBirthDate().getTime() < range1.getTime())) {
                        resultProfiles.add(profile);
                    }
                    break;
                case 4: // 35-50
                    Calendar calendar41 = Calendar.getInstance();
                    Calendar calendar42 = Calendar.getInstance();
                    calendar41.add(Calendar.YEAR, -35);
                    calendar42.add(Calendar.YEAR, -50);
                    range1 = calendar41.getTime();
                    range2 = calendar42.getTime();
                    if ((profile.getBirthDate().getTime() > range2.getTime()) && (profile.getBirthDate().getTime() < range1.getTime())) {
                        resultProfiles.add(profile);
                    }
                    break;
                case 5: // 50-65
                    Calendar calendar51 = Calendar.getInstance();
                    Calendar calendar52 = Calendar.getInstance();
                    calendar51.add(Calendar.YEAR, -50);
                    calendar52.add(Calendar.YEAR, -65);
                    range1 = calendar51.getTime();
                    range2 = calendar52.getTime();
                    if ((profile.getBirthDate().getTime() < range2.getTime()) && (profile.getBirthDate().getTime() > range1.getTime())) {
                        resultProfiles.add(profile);
                    }
                    break;
                case 6: // 65+
                    Calendar calendar61 = Calendar.getInstance();
                    calendar61.add(Calendar.YEAR, -65);
                    range1 = calendar61.getTime();
                    if (profile.getBirthDate().getTime() < range1.getTime()) {
                        resultProfiles.add(profile);
                    }
                    break;
            }
        }
        return resultProfiles;
    }

    /**
     * Removes traveller types from result list
     * @param resultData current list to return
     * @param searchData Form holding search terms
     * @return queried list including traveller types search
     */
    public List<Profile> searchTravelTypes(List<Profile> resultData, PartnerFormData searchData){
        List<Profile> resultProfiles = new ArrayList<>();
        String travellerTypeTerm = searchData.searchTravellerTypes;

        for (Profile profile : resultData) {
            if (profile.getTravellerTypes().contains(travellerTypeTerm)) {
                resultProfiles.add(profile);
            }
        }
        return resultProfiles;
    }

    /**
     * Method to search for travel partners (profiles) with a search term. The search term can be any of the following attributes:
     * nationality, gender, age range, type of traveller.
     * @param searchForm
     * @return return list of profiles
     */
    public List<Profile> listGender(PartnerFormData searchForm) {
        List<Profile> resultProfiles = new ArrayList<>();
        List<Profile> profiles = Profile.find.all();

        System.out.println("Partner Data " + searchForm.searchGender);
        String genderTerm = searchForm.searchGender;
//        String travellerTypeTerm = searchForm.searchTravellerTypes;

        System.out.println("Gender search String " + genderTerm);

        if (!genderTerm.equals("")) {
            for (Profile profile : profiles) {
                if (profile.getGender().contains(genderTerm)) {
                    resultProfiles.add(profile);
                }
            }
        } else {
            resultProfiles = profiles;
        }
        return resultProfiles;
    }

    /**
     * This method shows the travellers page on the screen
     * @return
     */
    public Result show(Http.Request request) {
        List<Profile> profiles = Profile.find.all();
        return ok(travellers.render(form, profiles, request, messagesApi.preferred(request)));
    }
}
/**
 * Method to load up search form page and pass through the input form and https request for use in the listOne method
 * @param request an HTTP request that will be sent with the function call
 * @return a rendered view of the search profile form
 *
public Result searchProfile(Http.Request request) {
Form<SearchFormData> profileForm = formFactory.form(SearchFormData.class);
return ok(views.html.searchProfileForm.render(profileForm, request));
}*/

/**
 * Method to load up search form page and pass through the input form and https request for use in the listPartner method
 * @param request an HTTP request that will be sent with the function call
 * @return
 *
public Result searchPartner(Http.Request request) {
Form<PartnerFormData> partnerForm = formFactory.form(PartnerFormData.class);
return ok(views.html.searchPartnerForm.render(partnerForm, request));
}*/

/**
 * Display one profile based on user input (email)
 * @param request an HTTP request that will be sent with the function call
 * @return a rendered view of one profile and all its attributes
 *
public Result listOne(Http.Request request) {
Form<SearchFormData> profileForm = formFactory.form(SearchFormData.class).bindFromRequest(request);
SearchFormData profileData = profileForm.get();
Profile userProfile = Profile.find.byId(profileData.email);

if (userProfile == null) {
return notFound("Profile not found!");
}
return ok(views.html.displayProfile.render(userProfile));
}*/
