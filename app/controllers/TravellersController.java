package controllers;

import models.PartnerFormData;
import models.Profile;
import play.data.Form;
import play.data.FormFactory;
import play.i18n.MessagesApi;
import play.mvc.Controller;
import play.mvc.Http;
import play.mvc.Result;
import views.html.*;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.List;


/**
 * This class is the controller for the travellers.scala.html file, it provides the route to the
 * travellers page
 */
public class TravellersController extends Controller {


    private final Form<PartnerFormData> form;
    private MessagesApi messagesApi;

    @Inject
    public TravellersController(FormFactory formFactory, MessagesApi messagesApi) {
        this.form = formFactory.form(PartnerFormData.class);
        this.messagesApi = messagesApi;
    }

    public Result search(Http.Request request){
        Form<PartnerFormData> searchForm = form.bindFromRequest(request);
        PartnerFormData searchData = searchForm.get();
        //todo change queryProfiles to be list of profiles generated by search functionality
        List<Profile> genderSorted = listPartners(searchData);
//        List<Profile> natSorteed = listTravel(genderSorted, searchfrom );
//        List<Profile> queryProfiles = Profile.find.all();
        return ok(travellers.render(form, genderSorted, request, messagesApi.preferred(request)));
    }

    /**
     * Method to search for travel partners (profiles) with a search term. The search term can be any of the following attributes:
     * nationality, gender, age range, type of traveller.
     * @param request an HTTP request that will be sent with the function call
     * @return
     */
    public List<Profile> listPartners(PartnerFormData searchForm) {
        List<Profile> resultProfiles = new ArrayList<>();
        List<Profile> profiles = Profile.find.all();

        System.out.println("Partner Data " + searchForm.searchGender);
        String genderTerm = searchForm.searchGender;
//        String travellerTypeTerm = searchForm.searchTravellerTypes;

        System.out.println("Gender search String " + genderTerm);

        if (!genderTerm.equals("")) {
            for (Profile profile : profiles) {
                if (profile.getGender().contains(genderTerm)) {
                    resultProfiles.add(profile);
                }
            }
        } else {
            resultProfiles = profiles;
        }
        return resultProfiles;
    }

    /**
     * This method shows the travellers page on the screen
     * @return
     */
    public Result show(Http.Request request) {
        List<Profile> profiles = Profile.find.all();
        return ok(travellers.render(form, profiles, request, messagesApi.preferred(request)));
    }
}
/**
 * Method to load up search form page and pass through the input form and https request for use in the listOne method
 * @param request an HTTP request that will be sent with the function call
 * @return a rendered view of the search profile form
 *
public Result searchProfile(Http.Request request) {
Form<SearchFormData> profileForm = formFactory.form(SearchFormData.class);
return ok(views.html.searchProfileForm.render(profileForm, request));
}*/

/**
 * Method to load up search form page and pass through the input form and https request for use in the listPartner method
 * @param request an HTTP request that will be sent with the function call
 * @return
 *
public Result searchPartner(Http.Request request) {
Form<PartnerFormData> partnerForm = formFactory.form(PartnerFormData.class);
return ok(views.html.searchPartnerForm.render(partnerForm, request));
}*/

/**
 * Display one profile based on user input (email)
 * @param request an HTTP request that will be sent with the function call
 * @return a rendered view of one profile and all its attributes
 *
public Result listOne(Http.Request request) {
Form<SearchFormData> profileForm = formFactory.form(SearchFormData.class).bindFromRequest(request);
SearchFormData profileData = profileForm.get();
Profile userProfile = Profile.find.byId(profileData.email);

if (userProfile == null) {
return notFound("Profile not found!");
}
return ok(views.html.displayProfile.render(userProfile));
}*/
